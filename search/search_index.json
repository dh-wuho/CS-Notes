{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"This is my CS Notes.","title":"Home"},{"location":"csc541/","text":"","title":"Preface"},{"location":"csc541/interval-tree/","text":"The interval tree structure stores a set of intervals and returns for any query key all the intervals that contain this query value. $$a_1, b_1$$ test for katex","title":"Interval Tree"},{"location":"csc568/0-index/","text":"","title":"Preface"},{"location":"csc568/10-SAN/","text":"SAN(Storage Area Network) Organize connection between storage and servers . SCSI SCSI is a kind of block protocol. Others are files or objects. ![SCSIarchictecture][] iSCSI iSCSI, FCOE fiber channel over Ethernet substitution of fiber channel transport protocol(block protocol) SCSI, HiPPI, ESCO switched fabric block I/O ![SANarchictecture][] HBA Host Bus Adapter: cable, hub, switch About SAN Channel Oriented channel processor Network Oriented full multiplexing peer to peer internetwork Benefits of SAN high bandwidth SCSI extension resource consolidation centralized storage, management security(it's the server initiates the I/O) scalability","title":"10 - SAN"},{"location":"csc568/10-SAN/#sanstorage-area-network","text":"Organize connection between storage and servers .","title":"SAN(Storage Area Network)"},{"location":"csc568/10-SAN/#scsi","text":"SCSI is a kind of block protocol. Others are files or objects. ![SCSIarchictecture][]","title":"SCSI"},{"location":"csc568/10-SAN/#iscsi","text":"iSCSI, FCOE fiber channel over Ethernet substitution of fiber channel transport protocol(block protocol) SCSI, HiPPI, ESCO switched fabric block I/O ![SANarchictecture][]","title":"iSCSI"},{"location":"csc568/10-SAN/#hba","text":"Host Bus Adapter: cable, hub, switch","title":"HBA"},{"location":"csc568/10-SAN/#about-san","text":"Channel Oriented channel processor Network Oriented full multiplexing peer to peer internetwork","title":"About SAN"},{"location":"csc568/10-SAN/#benefits-of-san","text":"high bandwidth SCSI extension resource consolidation centralized storage, management security(it's the server initiates the I/O) scalability","title":"Benefits of SAN"},{"location":"csc568/11-NAS/","text":"NAS(Network Attached Storage) File-based and client-server model. Protocol for NAS well-defined message and response support OS file operations Sketch client: initialize the request server: locate file, response the file through network, resolve conflict, prioritize design: what APIs are needed to finish the jobs? (straightforward protocol) how elaborate the client/server is? (server has to handle many clients at the same time) so the simpler server is, the more concurrency server can be. e.g. JavaScript. Client translate users' calls to NAS protocol cooperate with server heart beat message cache(latency-tolerance device) Server: manage data(efficiently, reliably, securely...) could prefetch could upcalls(communicate with clients). upcalls are limited on stateful protocol Protocols of NAS NFS stateless hierarchy no upcalss from servers SMB(CIFS) more \"talktive\" generic: printer","title":"11 - NAS"},{"location":"csc568/11-NAS/#nasnetwork-attached-storage","text":"File-based and client-server model.","title":"NAS(Network Attached Storage)"},{"location":"csc568/11-NAS/#protocol-for-nas","text":"well-defined message and response support OS file operations","title":"Protocol for NAS"},{"location":"csc568/11-NAS/#sketch","text":"client: initialize the request server: locate file, response the file through network, resolve conflict, prioritize design: what APIs are needed to finish the jobs? (straightforward protocol) how elaborate the client/server is? (server has to handle many clients at the same time) so the simpler server is, the more concurrency server can be. e.g. JavaScript.","title":"Sketch"},{"location":"csc568/11-NAS/#client","text":"translate users' calls to NAS protocol cooperate with server heart beat message cache(latency-tolerance device)","title":"Client"},{"location":"csc568/11-NAS/#server","text":"manage data(efficiently, reliably, securely...) could prefetch could upcalls(communicate with clients). upcalls are limited on stateful protocol","title":"Server:"},{"location":"csc568/11-NAS/#protocols-of-nas","text":"NFS stateless hierarchy no upcalss from servers SMB(CIFS) more \"talktive\" generic: printer","title":"Protocols of NAS"},{"location":"csc568/12-DFS/","text":"DFS(Distributed File System) How to compare different file systems? What's the measurements of DFS? 1. View hierarchical FS global view: all clients have the same view local view: client can have different views, mount 2. State open on clients also open on server(connection) server must remember client must close comparison(statefull vs stateless) message is longer(stateless) server is simpler idempotent(stateless) lock or lease stateful -> client locks a file stateless -> lease a period of time 3. Cache Where does the caching occur? - clients: memory/disks - server: memory Cache Size Choice: once it's determined, changing it is risky!(Cache background....any solution to it) Cache Replacement Policy: LRU, approximate policy - clock Consistency: replication, update Cache Consistency Policy: - UNIX file consistency: no design on it,it leaves to the application to handle the consistency problem. e.g. Google doc. - write-through-cache(relatively write-through-disk) - dealyed-write: delay some files - write-on-close: delay one single file - delayed-write-on-close: the lifetime of files are usually short 4. Replication block-based access raw block: typically high performance applicaiton must provide all data manage leverage: e.g. ls file clustered file server file-based access Virtualization. Benefits over block-based access: abstraction hides the implementation server independence Fine-grained data management permission backup(e.g. S3) share data cost high CPU per request network technology infi band RDMA, rget, rput","title":"12 - DFS"},{"location":"csc568/12-DFS/#dfsdistributed-file-system","text":"How to compare different file systems? What's the measurements of DFS?","title":"DFS(Distributed File System)"},{"location":"csc568/12-DFS/#1-view","text":"hierarchical FS global view: all clients have the same view local view: client can have different views, mount","title":"1. View"},{"location":"csc568/12-DFS/#2-state","text":"open on clients also open on server(connection) server must remember client must close comparison(statefull vs stateless) message is longer(stateless) server is simpler idempotent(stateless) lock or lease stateful -> client locks a file stateless -> lease a period of time","title":"2. State"},{"location":"csc568/12-DFS/#3-cache","text":"Where does the caching occur? - clients: memory/disks - server: memory Cache Size Choice: once it's determined, changing it is risky!(Cache background....any solution to it) Cache Replacement Policy: LRU, approximate policy - clock Consistency: replication, update Cache Consistency Policy: - UNIX file consistency: no design on it,it leaves to the application to handle the consistency problem. e.g. Google doc. - write-through-cache(relatively write-through-disk) - dealyed-write: delay some files - write-on-close: delay one single file - delayed-write-on-close: the lifetime of files are usually short","title":"3. Cache"},{"location":"csc568/12-DFS/#4-replication","text":"","title":"4. Replication"},{"location":"csc568/12-DFS/#block-based-access","text":"raw block: typically high performance applicaiton must provide all data manage leverage: e.g. ls file clustered file server","title":"block-based access"},{"location":"csc568/12-DFS/#file-based-access","text":"Virtualization. Benefits over block-based access: abstraction hides the implementation server independence Fine-grained data management permission backup(e.g. S3) share data cost high CPU per request network technology infi band RDMA, rget, rput","title":"file-based access"},{"location":"csc568/13-Ceph/","text":"Ceph A kind of distributed file system, using CRUSH algorithm . Goal scalability capacity throughtput client performance individual emphasison HPO: shared files, lock-step manner(distribute jobs to processors then merge) reliability dynamic(peta byte) build incrementally failures quality and character of workload changes performance Key Ideas objects based storage system decouple data and metadata They are in different clusters They have different retreving pattern Key features Servers decouple data and metadata CRUSH: controlled repliction under scalable washing files striped onto predictable objects CRUSH maps objects to storage device Dynamically distribute meta data management metadata operations make up 50% of all operations dynamic subtree partitioning Object based storage Others: migrate, replication, failure detection, recovery Clients ceph interface POSIX compliant decouple data and metadata user space implementation >example: >client sends request to MDS >MDS returns capability, file index, size, stripe information... >client reads/writes directly from/to OSD >MDS mnage the capability >client sends close synchronization adhere to POSIX include HPC-oriented extensions consistency/correctness by defaults optimally relax constraint, like clients could write to different locations extension for both data and metadata synchronize I/O used on multiple writes, or mix reader and writer. distribute metadata HDS used journaling repetition metadata updates in memory optimize on-disk layout for read access adaptively distributed cached metadata accessed nodes distributed objected storage files are splited into objects objects are members of placement groups placement groups are distributed to OSD","title":"13 - Ceph"},{"location":"csc568/13-Ceph/#ceph","text":"A kind of distributed file system, using CRUSH algorithm .","title":"Ceph"},{"location":"csc568/13-Ceph/#goal","text":"scalability capacity throughtput client performance individual emphasison HPO: shared files, lock-step manner(distribute jobs to processors then merge) reliability dynamic(peta byte) build incrementally failures quality and character of workload changes performance","title":"Goal"},{"location":"csc568/13-Ceph/#key-ideas","text":"objects based storage system decouple data and metadata They are in different clusters They have different retreving pattern","title":"Key Ideas"},{"location":"csc568/13-Ceph/#key-features","text":"","title":"Key features"},{"location":"csc568/13-Ceph/#servers","text":"decouple data and metadata CRUSH: controlled repliction under scalable washing files striped onto predictable objects CRUSH maps objects to storage device Dynamically distribute meta data management metadata operations make up 50% of all operations dynamic subtree partitioning Object based storage Others: migrate, replication, failure detection, recovery","title":"Servers"},{"location":"csc568/13-Ceph/#clients","text":"ceph interface POSIX compliant decouple data and metadata user space implementation >example: >client sends request to MDS >MDS returns capability, file index, size, stripe information... >client reads/writes directly from/to OSD >MDS mnage the capability >client sends close synchronization adhere to POSIX include HPC-oriented extensions consistency/correctness by defaults optimally relax constraint, like clients could write to different locations extension for both data and metadata synchronize I/O used on multiple writes, or mix reader and writer.","title":"Clients"},{"location":"csc568/13-Ceph/#distribute-metadata","text":"HDS used journaling repetition metadata updates in memory optimize on-disk layout for read access adaptively distributed cached metadata accessed nodes distributed objected storage files are splited into objects objects are members of placement groups placement groups are distributed to OSD","title":"distribute metadata"},{"location":"csc568/14-GFS/","text":"GFS(Google File System) What does it do? set out to build a DFS willing to change anything(e.g. client API: gfs-open, gfs-read...) apps modification/cooperation Design constraints compliant to failure in norm bugs, human errors, power loss maintaining, detecting and recovery files are huge multi-GB are common. Comparing to billions of KB files most modification are appends random writes are practically non-exist many files are written once and read many times sequentially two types of reads large streaming read small random reads google gathers websites and build inddddd indice. skip and forward, always in forwad dimention. sustained bandwidth 7 latency Architectual Design GFS cluster a single master multiple chunk servers chunk servers can be accessed by clients compliant linux servers File represent as fix-sized chunk(like object in Ceph) 64-bits unique ID stored at chunk server(deliver directly from chunk server, reducing throughput latency) 3 way replication Master metadata management Clients master the metadata data from chunk servers it doesn't use VFS no caching at clients. I/O are usually streaming, no temporary cache ..... Why Single Master Design? simple. Multi-masters have to cooperate or replicate master. master only ensuadsf chunk locations clients typically ask for multiple chunk locations in one request chunk size 64MB or 64bits(ID) fewer requests to master fewer metadata entries fragmentation(64MB per chunk) 64bits per 64MB chunk, cache chunk ID in memory chunk location no persistent: clients just know the chunks but not their locations startup: send info to master operation logs metadata updates are logs take global snapshots to truncate logs Lease 60s time-out renew indefinitely","title":"14 - GFS"},{"location":"csc568/14-GFS/#gfsgoogle-file-system","text":"","title":"GFS(Google File System)"},{"location":"csc568/14-GFS/#what-does-it-do","text":"set out to build a DFS willing to change anything(e.g. client API: gfs-open, gfs-read...) apps modification/cooperation","title":"What does it do?"},{"location":"csc568/14-GFS/#design-constraints","text":"compliant to failure in norm bugs, human errors, power loss maintaining, detecting and recovery files are huge multi-GB are common. Comparing to billions of KB files most modification are appends random writes are practically non-exist many files are written once and read many times sequentially two types of reads large streaming read small random reads google gathers websites and build inddddd indice. skip and forward, always in forwad dimention. sustained bandwidth 7 latency","title":"Design constraints"},{"location":"csc568/14-GFS/#architectual-design","text":"GFS cluster a single master multiple chunk servers chunk servers can be accessed by clients compliant linux servers File represent as fix-sized chunk(like object in Ceph) 64-bits unique ID stored at chunk server(deliver directly from chunk server, reducing throughput latency) 3 way replication Master metadata management Clients master the metadata data from chunk servers it doesn't use VFS no caching at clients. I/O are usually streaming, no temporary cache .....","title":"Architectual Design"},{"location":"csc568/14-GFS/#why-single-master-design","text":"simple. Multi-masters have to cooperate or replicate master. master only ensuadsf chunk locations clients typically ask for multiple chunk locations in one request chunk size 64MB or 64bits(ID) fewer requests to master fewer metadata entries fragmentation(64MB per chunk) 64bits per 64MB chunk, cache chunk ID in memory chunk location no persistent: clients just know the chunks but not their locations startup: send info to master operation logs metadata updates are logs take global snapshots to truncate logs","title":"Why Single Master Design?"},{"location":"csc568/14-GFS/#lease","text":"60s time-out renew indefinitely","title":"Lease"}]}